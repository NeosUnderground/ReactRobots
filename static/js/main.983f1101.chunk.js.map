{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","borderRadius","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.983f1101.chunk.js","sourcesContent":["//Child of Cardlist.js\r\n//this compoenent is for each of the robot cards, which is passed the name, email, id properties (which are destructured) into the H2 and p tags. The API is generating the robot images and are uniquely assigned to the robots based on their differing Ids.\r\n\r\nimport React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","//child of App.js\r\n//Parent of Card.js\r\n//this compoenent is for the number of cards displayed based on the input data.\r\n\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\n//is passed the robots property which is destructured. Then the robots array is mapped, which takes the \"users\", and \"i\" parameters. The key, id, name, and email variables are assigned the values from the array which can then be passed to the card compoenet.\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) =>{\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}/>\r\n        );\r\n      })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","//this compoenent is for the searchbox.\r\n\r\nimport React from 'react';\r\n\r\n//is passed the searchfield and searchchange properties which are destructured. The input onChange event is triggered when a character is enteredd. When this happens the \"searchChange\" property is called which is assigned to the \"onSearchChange\" function in App.js\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n      <input\r\n        className='pa3 ba b--light-purple bg-lightest-blue br3'\r\n        type='search'\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","//This componenet will add a scrollable area that can surround a child componenet.\r\n\r\nimport React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{overflow: 'scroll', borderRadius:'5px', height: '80vh', }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport {setSearchField, requestRobots} from '../Actions.js';\r\n\r\n//recieves a state and rerutns an object which contains the searchdield state from the reducer and passes it as a property to the app.\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\n//triggers the actoin, dispatch sends the actions into the reducer. Receives an event (its a DOM event) which is dispatches (or sends) the action (setSearchField) so the reducers are aware of it. This is returned as an object.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n }\r\n}\r\n//Defines the class APP\r\nclass App extends Component {\r\n\r\n//Fetches the API containing a list of users that is then assigned to the robots state array.\r\ncomponentDidMount(){\r\n  this.props.onRequestRobots();\r\n}\r\n\r\n//renders the components and compares the values entered in the searchbox with the names of the robots. Returns the matches via Cardlist compoenent.\r\n  render(){\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n\r\n//check to see if loading\r\n    return isPending ?\r\n      <h1>Loading..</h1>\r\n    :(\r\n      <div className='tc'>\r\n        <h1 className='f1 ma1'>ReactRobots</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n      );\r\n    }\r\n}\r\n//connect is the function from the react-redux. This is a higher order function. This is the syntax. Connect accepts two parameters which is the standard. This allows APP to connect to the redux store.\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","//This Component recieves the text that the user inputs and returns (since the return statement is  within a ({}) we don't need to type 'return') an object with type of 'change searchfield' (which is the action and is a constant variable) and a paylod of text.\r\n\r\nimport {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\n//this action requests the robots list that takes the dispatch parameter and dispatches the pending action. Next, it fetches the robots API. Then it dispatches the request action with the payload of data. The catch dispatches the failed action with the payload of error. This is a higer oder funtion, that returns a funtion within a function. This allows the dispatch parameter to be used in the lower function.\r\nexport const requestRobots = () => (dispatch) =>{\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","//file that contains our constants for our actions.\r\n\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//const for requesting robots, this is a promise that is going to require three states: pending, success, fail.\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\n//sets the initial state of our searchfield\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\n//creates the Redux reducer. Accepts the initialstate and action which returns the state of the searchfield\r\nexport const searchRobots = (state = initialStateSearch, action ={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots ={\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action ={}) =>{\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state,{error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\n//middleware\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n//imprts reducer\nimport {searchRobots, requestRobots} from './Reducers';\n\n//creates the middleware via importing \"createLogger\" from redux-logger, to apply the middleware it needs to be passed through redux.\nconst logger = createLogger();\n\n//combines the reducers into one\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\n//creates the store, the middleware's are in order. thunk gets ran before logger.\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  //provider allows us to pass the store state to the components\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}